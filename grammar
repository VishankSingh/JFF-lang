program             ::= { declaration } ;

declaration         ::= function_decl
                     | var_decl ";" ;

function_decl   ::= "func" IDENTIFIER "(" [ param_list ] ")" ":" type "{" { statement } "}" ;

param_list      ::= param { "," param } ;
param           ::= IDENTIFIER ":" type ;

var_decl        ::= IDENTIFIER ":" type "=" expression ;
assignment      ::= IDENTIFIER "=" expression
                 | IDENTIFIER ( "+=" | "-=" | "*=" | "/=" ) expression
                 | IDENTIFIER ( "++" | "--" ) ;


statement       ::= var_decl ";"
                 | assignment ";"
                 | "return" [ expression ] ";"
                 | "print" "(" arg_list ")" ";"
                 | "break" ";"
                 | "continue" ";"
                 | "if" "(" expression ")" "{" { statement } "}" 
                    { "elif" "(" expression ")" "{" { statement } "}" } 
                    [ "else" "{" { statement } "}" ] 
                 | "while" "(" expression ")" block
                 | "for" "(" [ var_decl | assignment ] ";" [ expression ] ";" [ assignment ] ")" block
                 | expression ";"
                 ;

block           ::= "{" { statement } "}" ;



expression      ::= logical_or ;


logical_or      ::= logical_and { "||" logical_and } ;
logical_and     ::= equality { "&&" equality } ;
equality        ::= comparison { ( "==" | "!=" ) comparison } ;
comparison      ::= term { ( ">" | ">=" | "<" | "<=" ) term } ;
term            ::= factor { ( "+" | "-" ) factor } ;
factor          ::= unary { ( "*" | "/" | "%" ) unary } ;
unary           ::= ( "+" | "-" | "!" | "++" | "--" ) unary 
                 | primary 
                 | IDENTIFIER ( "++" | "--" )
                 ;

primary         ::= INTEGER 
                 | FLOAT 
                 | STRING 
                 | "true" 
                 | "false" 
                 | "null"
                 | IDENTIFIER
                 | IDENTIFIER "(" [ arg_list ] ")"    // function call
                 | "(" expression ")" ;

arg_list        ::= expression { "," expression } ;

type            ::= "int" | "float" | "string" | "bool" | "void" ;